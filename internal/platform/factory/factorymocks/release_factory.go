// Code generated by mockery v2.42.1. DO NOT EDIT.

package factorymocks

import (
	apiExample "github.com/marcohb99/go-api-example/internal"
	mock "github.com/stretchr/testify/mock"
)

// ReleaseFactory is an autogenerated mock type for the ReleaseFactory type
type ReleaseFactory struct {
	mock.Mock
}

// BuildMany provides a mock function with given fields: data
func (_m *ReleaseFactory) BuildMany(data interface{}) ([]apiExample.Release, error) {
	ret := _m.Called(data)

	if len(ret) == 0 {
		panic("no return value specified for BuildMany")
	}

	var r0 []apiExample.Release
	var r1 error
	if rf, ok := ret.Get(0).(func(interface{}) ([]apiExample.Release, error)); ok {
		return rf(data)
	}
	if rf, ok := ret.Get(0).(func(interface{}) []apiExample.Release); ok {
		r0 = rf(data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]apiExample.Release)
		}
	}

	if rf, ok := ret.Get(1).(func(interface{}) error); ok {
		r1 = rf(data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewReleaseFactory creates a new instance of ReleaseFactory. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReleaseFactory(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReleaseFactory {
	mock := &ReleaseFactory{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

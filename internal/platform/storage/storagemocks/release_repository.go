// Code generated by mockery v2.42.1. DO NOT EDIT.

package storagemocks

import (
	context "context"

	apiExample "github.com/marcohb99/go-api-example/internal"

	mock "github.com/stretchr/testify/mock"
)

// ReleaseRepository is an autogenerated mock type for the ReleaseRepository type
type ReleaseRepository struct {
	mock.Mock
}

// GetAll provides a mock function with given fields: ctx, limit
func (_m *ReleaseRepository) GetAll(ctx context.Context, limit int) ([]apiExample.Release, error) {
	ret := _m.Called(ctx, limit)

	if len(ret) == 0 {
		panic("no return value specified for GetAll")
	}

	var r0 []apiExample.Release
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, int) ([]apiExample.Release, error)); ok {
		return rf(ctx, limit)
	}
	if rf, ok := ret.Get(0).(func(context.Context, int) []apiExample.Release); ok {
		r0 = rf(ctx, limit)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]apiExample.Release)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, int) error); ok {
		r1 = rf(ctx, limit)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Save provides a mock function with given fields: ctx, release
func (_m *ReleaseRepository) Save(ctx context.Context, release apiExample.Release) error {
	ret := _m.Called(ctx, release)

	if len(ret) == 0 {
		panic("no return value specified for Save")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, apiExample.Release) error); ok {
		r0 = rf(ctx, release)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewReleaseRepository creates a new instance of ReleaseRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewReleaseRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *ReleaseRepository {
	mock := &ReleaseRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
